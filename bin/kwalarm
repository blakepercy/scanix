#!/bin/bash

source ~/scanix/lib/log4bash

HELP=false
VERB=false

# Use > 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use > 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
while [[ $# > 0 ]]
do
key="$1"

case $key in
    -e|--expression)
    EXPRESSION="$2"
    shift # past argument
    ;;
    -s|--searchpath)
    SEARCHPATH="$2"
    shift # past argument
    ;;
    -k|--keyfile)
    KEYFILE="$2"
    shift # past argument
    ;;
    -n|--name)
    NAME="$2"
    shift
    ;;
    -h|--help)
    HELP=true
    shift # past argument
    ;;
    -v|--verbose)
    VERB=true
    shift
    ;;
    --default)
    DEFAULT=YES
    ;;
    *)
            # unknown option
    ;;
esac
shift # past argument or value
done

#echo EXPRESSION  = "${EXPRESSION}"
#echo SEARCH PATH     = "${SEARCHPATH}"
#echo KEY FILE    = "${KEYFILE}"
#echo NAME    = "${NAME}"
#echo DEFAULT = "${DEFAULT}"

if [[ -n $1 ]]; then
    echo "Last argument specified as non-opt/last argument:"
    echo "$1"
fi

if $HELP; then
    echo ""
    echo -e "Keword Alarm - Raise an alarm if keyword(s) are found within an input stream"
    echo -e "  Usage: stream | kwalarm -e \"regular expression\""
    echo ""
else
    # Handle the piped input, line-by-line.
    cat | 
    {
        IFS=$'\n'
        while read line; do
            if [[ -n $EXPRESSION ]]; then
                if [[ -n $NAME ]]; then line=$(printf "\t[%s] - %s" $NAME $line); fi
                #echo $line | grep --silent -i -E "($EXPRESSION)" && log_error "$line\n" || if $VERB; then log "$line"; fi
		echo $line | grep -i -v -E "(debug|info)" | grep --silent -i -E "($EXPRESSION)" && log_error "$line\n" || if $VERB; then log "$line"; fi
            fi
        done
    }
fi
